<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="category">

    <select id="getCategories" resultType="com.jsrm.model.catalog.Category" parameterType="java.util.HashMap">

        select * from t_base_categories

        <where>
            <if test="empty neq id">
                AND id = #{id}
            </if>
            <if test="empty neq ids">
                AND id in
                <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="empty neq flag">
                AND flag = #{flag}
            </if>
            <if test="empty neq name">
                AND name = #{name}
            </if>
            <if test="empty neq parentId">
                AND parentId = #{parentId}
            </if>
            <if test="empty neq deep">
                AND deep = #{deep}
            </if>
            <if test="empty neq deepCode">
                AND deepCode = #{deepCode}
            </if>

            AND flag='0'
        </where>
        order by id;

    </select>
    <select id="getCategoryDicts" resultType="com.jsrm.model.catalog.CategoryDict" parameterType="java.util.HashMap">

        select * from t_base_categories_dict

        <where>
            <if test="empty neq id">
                AND id = #{id}
            </if>
            <if test="empty neq ids">
                AND code in
                <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
           
            <if test="empty neq name">
                AND name = #{name}
            </if>           
        </where>
        order by id;

    </select>

    <select id="getiCategory" resultType="com.jsrm.model.catalog.Category" parameterType="map">
                SELECT * FROM t_base_categories t1,
            (
                SELECT id FROM t_base_categories WHERE
                    name = #{name} AND deep = #{deep}
            ) t2
        WHERE
            t1.parentId = t2.id order by t1.id desc;
    </select>

    <select id="getIcategoryByStr" resultType="com.jsrm.model.catalog.Icategory" parameterType="String">
    SELECT t.*
    FROM
        (
            SELECT *,
                CONCAT(
                    level1,
                    "-",
                    SUBSTRING_INDEX(level2,"-",-1),
                    "-",
                    SUBSTRING_INDEX(level3,"-",-1),
                    "-",
                    SUBSTRING_INDEX(level4,"-",-1)
                ) AS level1234
            FROM
                `t_base_categories_relation`
        ) t
    WHERE
        locate(#{level1234}, level1234);
    </select>

    <select id="getCategoryDictNameByCode" resultType="com.jsrm.model.catalog.CategoryDict" parameterType="string">
        SELECT * FROM t_base_categories_dict WHERE code = #{code}
    </select>

    <select id="getCategoryRelations" resultType="com.jsrm.model.catalog.Icategory" parameterType="map" statementType="STATEMENT">
        SELECT * FROM t_base_categories_relation
        <where>
            <if test="empty neq iLevel">
                AND SUBSTRING_INDEX(${iLevel},'-', -1) = '${iCode}'
            </if>
        </where>
        ORDER BY level1Sort,level2Sort,level3Sort,level4Sort
    </select>
    <select id="getIcategoryByCodeOrLeve4" resultType="com.jsrm.model.catalog.Icategory" parameterType="map">
        SELECT * FROM t_base_categories_relation
        <where>
            <if test="empty neq level4">
                AND level4 = #{level4}
            </if>
            <if test="empty neq code">
                AND code = #{code}
            </if>
        </where>
    </select>

    <select id="getCategoryRelationLevels" resultType="map" parameterType="map" statementType="STATEMENT">
        SELECT DISTINCT(SUBSTRING_INDEX(${level},'-', -1)) as code, cd.name as name
        FROM t_base_categories_relation cr,t_base_categories_dict cd
        WHERE cd.code = SUBSTRING_INDEX(${level},'-', -1)
        ORDER BY ${level}Sort
    </select>

    <select id="getICategoryByParentCode" resultType="map" parameterType="map" statementType="STATEMENT">
        SELECT DISTINCT(cr.${iLevel}) as code,cd.name FROM t_base_categories_relation cr,t_base_categories_dict cd
        <where>
            SUBSTRING_INDEX(cr.${iLevel},'-',-1) = cd.code
            <if test="empty neq parentCode">
                AND LEFT (cr.${iLevel}, LENGTH ('${parentCode}')) = '${parentCode}'
            </if>
        </where>
        ORDER BY cr.level1Sort,cr.level2Sort,cr.level3Sort,cr.level4Sort
    </select>

    <!-- 获取前四级学段学科 -->
    <select id="getPhaseAndSubject" resultType="map" statementType="STATEMENT">

       SELECT DISTINCT ${columnName}
       FROM
            t_base_categories_relation order by ${columnName}

    </select>

    <!-- 获取sessionId -->
    <select id="getSessionId" resultType="map" >

          select id from t_user

          <where>
                AND state = 1
          </where>

    </select>

    <!-- 获取记录总数 -->
    <select id="getTotalCount" resultType="Integer" parameterType="map">
    		select COUNT(*)AS total from

		(select distinct d.userId,u.username,u.userDes,r.rolename from t_sys_mid_user_dataauthority_rel d
		inner join t_user u on u.id = d.userId
		left join t_sys_mid_user_role_rel mr on mr.USERID = u.id
		left join t_sys_role r on r.id = mr.ROLEID
		where d.dataAuthorityId in
		(select d.dataAuthorityId from t_sys_mid_user_dataauthority_rel d where d.userId = '${id}')
		and r.rolename != 'BOSS') aa

		left join

		(select r.createUserId as userId,count(r.createUserId) as num from t_resource_info r
		inner join t_resouce_mid_categories m1 on m1.busiId = r.id and m1.categDeep = '1'
		inner join t_resouce_mid_categories m2 on m2.busiId = r.id and m2.categDeep = '2'
		where r.state = '3' and r.resourceType = 'END'

		group by r.createUserId)
		bb on aa.userId = bb.userId

		left join

		(select r.createUserId as userId,count(r.createUserId) as num from t_resource_info r
		inner join t_resouce_mid_categories m1 on m1.busiId = r.id and m1.categDeep = '1'
		inner join t_resouce_mid_categories m2 on m2.busiId = r.id and m2.categDeep = '2'
		where r.state = '3' and r.resourceType = 'DRA'


		group by r.createUserId)
		cc on aa.userId = cc.userId

		left join

		(select h.approveUserId AS userId,count(h.approveUserId) AS checkCount from t_approve_history h
		left join t_resource_info r on h.busiId = r.id
		inner join t_resouce_mid_categories m1 on m1.busiId = r.id and m1.categDeep = '1'
		inner join t_resouce_mid_categories m2 on m2.busiId = r.id and m2.categDeep = '2'
		where h.taskIndex != 'start'

		group by h.approveUserId)
		dd on aa.userId = dd.userId

		<where>
		1=1
		</where>
    </select>

    <select id="getLevelByDeep" resultType="java.lang.String" parameterType="map" statementType="STATEMENT">
        select distinct ${levelp} from t_base_categories_relation
    </select>

</mapper>